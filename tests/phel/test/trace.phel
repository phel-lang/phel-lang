(ns phel-test\test\trace
  (:require phel\trace :refer [dotrace])
  (:require phel\str :as s)
  (:require phel\test :refer [deftest is]))

(def- inc1-trace (dotrace "inc1" |(+ $ 1)))

(deftest trace-simple
  (let [out (with-output-buffer (inc1-trace 1))]
    (is (s/contains? out "(inc1 1)") "call traced")
    (is (s/contains? out "=> 2") "result traced")))

(defn- fact [n]
  (if (= n 0)
    1
    (* n (fact (- n 1)))))
(def- fact-trace (dotrace "fact" fact))

(deftest trace-nested
  (let [out (with-output-buffer (fact-trace 3))]
    (is (s/contains? out "(fact 3)") "call traced")
    (is (s/contains? out "=> 6") "final result")))
