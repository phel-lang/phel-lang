(ns phel-test\test\core\sequence-operation
  (:require phel\test :refer [deftest is]))

(deftest test-peek
  (is (= 3 (peek [1 2 3])) "peek on vector")
  (is (nil? (peek [])) "peek on empty vector")
  (is (= 3 (peek (php/array 1 2 3))) "peek on php array")
  (is (nil? (peek (php/array))) "peek on empty php array"))

(def- testing-set-global-array (php/array 1 2 3))

(deftest test-native-global-array-set
  (php/aset testing-set-global-array 0 4)
  (is (= (php/array 4 2 3) testing-set-global-array) "native global set on PHP array"))

(def- testing-unset-global-array (php/array 1 2 3))

(deftest test-native-global-array-unset
  (php/aunset testing-unset-global-array 2)
  (is (= (php/array 1 2) testing-unset-global-array) "native global unset on PHP array"))

(def- testing-push-global-array (php/array 1 2 3))

(deftest test-native-global-array-push
  (php/apush testing-push-global-array 4)
  (is (= (php/array 1 2 3 4) testing-push-global-array) "native global push on PHP array"))

(deftest test-native-array-aget-in
  (let [arr (php/array (php/array 1 2 3))]
    (is (= 2 (php/aget-in arr [0 1])) "nested php array get")))

(deftest test-native-array-aset-in
  (let [arr (php/array (php/array 1 2 3))]
    (php/aset-in arr [0 1] 4)
    (is (= (php/array (php/array 1 4 3)) arr) "nested php array set")))

(deftest test-native-array-aunset-in
  (let [arr (php/array (php/array 1 2 3))]
    (php/aunset-in arr [0 2])
    (is (= (php/array (php/array 1 2)) arr) "nested php array unset")))

(deftest test-native-array-apush-in
  (let [arr (php/array (php/array 1 2))]
    (php/apush-in arr [0] 3)
    (is (= (php/array (php/array 1 2 3)) arr) "nested php array push")))

(deftest test-push
  (let [x (php/array)]
    (php/apush x 1)
    (is (= (php/array 1) x) "native push on PHP array"))

  (let [x (php/array)]
    (is (= (php/array 1) (push x 1)) "push on PHP array"))

  (let [x (php/array)]
    (push x 1)
    (is (= (php/array) x) "push on PHP array, keeps initial state because it's immutable"))

  (let [x []]
    (push x 1)
    (is (= [] x) "push on existing vector, keeps initial state because it's immutable"))

  (is (= [1] (push [] 1)) "push on vector")

  (let [x (set)]
    (push x 1)
    (is (= (set) x) "push on existing set, keeps initial state because it's immutable"))

  (is (= (set 1) (push (set) 1)) "push on set"))

(deftest test-pop
  (let [x (php/array 1 2)
        y (pop x)]
    (is (= (php/array 1) x) "pop on PHP array: last element is removed")
    (is (= 2 y) "pop on PHP array: last element is returned")))

(deftest test-remove
  (let [xs (php/array 1 2 3 4)
        removed (remove xs 2)]
    (is (= (php/array 1 2) xs) "remove on PHP array: elements are removed")
    (is (= (php/array 3 4) removed) "remove on PHP array: correct value is returned"))

  (let [xs (php/array 1 2 3 4)
        removed (remove xs 2 1)]
    (is (= (php/array 1 2 4) xs) "remove with length on PHP array: elements are removed")
    (is (= (php/array 3) removed) "remove with length on PHP array: correct value is returned")))

(deftest test-slice
  (is (= [3 4] (slice [1 2 3 4] 2)) "slice on vector")
  (is (= [3] (slice [1 2 3 4] 2 1)) "slice with length on vector"))

(deftest test-get
  (is (= "b" (get (php/array "a" "b" "c") 1)) "get on php array")
  (is (= "b" (get ["a" "b" "c"] 1)) "get on vector")
  (is (= "a" (get {:a "a" :b "b"} :a)) "get on map")
  (is (= 1 (get (set 1 2 3) 1)) "get on set")
  (is (nil? (get nil 1)) "get on nil")
  (is (nil? (get {:a "a" :b "b"} :c)) "get undefined key on map")
  (is (nil? (get (set 1 2 3) 4)) "get undefined key on set")
  (is (= "x" (get nil 1 "x")) "get on nil with optional value")
  (is (= "x" (get {:a "a" :b "b"} :c "x")) "get on undefined key with optional value on map")
  (is (= "x" (get (set) 4 "x")) "get on undefined key with optional value on set")
  (is (id 0 (get {:a 0} :a)) "gets zero from a map"))

(deftest test-get-keyword
  (is (= 1 (:a {:a 1 :b 2})))
  (is (nil? (:c {:a 1 :b 2})))
  (is (= 3 (:c {:a 1 :b 2} 3))))

(deftest test-get-in
  (is (= "a" (get-in ["a"] [0])) "get-in level 1")
  (is (= "a" (get-in {:a ["a"]} [:a 0])) "get-in level 2")
  (is (= "a" (get-in {:a [["b" "a"]]} [:a 0 1])) "get-in level 3")
  (is (= "x" (get-in {:a [["b" "a"]]} [:b 0 1] "x")) "get-in level 3 with default"))

(deftest test-put
  (is (= {:a nil :b 2} (put {:a 1 :b 2} :a nil)) "put: nil on map")
  (is (= {:a 3 :b 2} (put {:a 1 :b 2} :a 3)) "put: replace entry on map")
  (is (= {:a 1 :b 2 :c 3} (put {:a 1 :b 2} :c 3)) "put: append entry on map"))

(deftest test-assoc
  (is (= {:a 3 :b 2} (assoc {:a 1 :b 2} :a 3)) "assoc: replace entry on map")
  (is (= {:a 1 :b 2 :c 3} (assoc {:a 1 :b 2} :c 3)) "assoc: append entry on map"))

(deftest test-unset
  (is (= {:b 2} (unset {:a 1 :b 2} :a)) "unset: remove key from map"))

(deftest test-dissoc
  (is (= {:b 2} (dissoc {:a 1 :b 2} :a)) "dissoc: remove key from map"))
