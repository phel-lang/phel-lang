(ns phel-test\test\core\boolean-operation
  (:require phel\test :refer [deftest is]))

(deftest test-or
  (is (nil? (or)) "or zero args")
  (is (true? (or true)) "(or true)")
  (is (false? (or false)) "(or false")
  (is (true? (or true false)) "(or true false)")
  (is (true? (or false true)) "(or false true)")
  (is (false? (or false false)) "(or false false)")
  (is (= 10 (or false 10)) "(or false 10)")
  (is (= 10 (or 10)) "(or 10)"))

(deftest test-and
  (is (true? (and)) "(and)")
  (is (true? (and true)) "(and true)")
  (is (true? (and true true)) "(and true true)")
  (is (false? (and false)) "(and false)")
  (is (false? (and true false)) "(and true false)")
  (is (false? (and true false true)) "(and true false true)")
  (is (= 10 (and true 10)) "(and true 10)")
  (is (false? (and false 10)) "(and false 10)")
  (is (= 10 (and 10)) "(and 10)"))

(deftest test-id
  (is (true? (id false)) "(id false)")
  (is (true? (id false false)) "(id false false)")
  (is (true? (id false false false)) "(id false false false)")
  (is (false? (id false true false)) "(id false true false)")
  (is (true? (id 10 10)) "(id 10 10)")
  (is (false? (id 10 10.0)) "(id 10 10.0)")
  (is (true? (id :test :test)) "keywords are always identical")
  (is (true? (id 'test 'test)) "symbol are always identical")
  (is (false? (id [] [])) "two empty vectors are not identical")
  (is (false? (id {} {})) "two empty maps are not identical"))

(deftest test-=
  (is (true? (= false)) "(= false)")
  (is (true? (false? false)) "(false? false)")
  (is (true? (false? false false)) "(false? false false)")
  (is (false? (false? true false)) "(false? true false)")
  (is (true? (= 10 10)) "(= 10 10)")
  (is (false? (= 10 10.0)) "(= 10 10.0)")
  (is (true? (= :test :test)) "keywords are always equal")
  (is (true? (= 'test 'test)) "symbol are always equal"))

(deftest test-=-vector
  (is (true? (= [] [])) "two empty vectors are equal")
  (is (true? (= ["hello"] ["hello"])) "two vectors with the same values")
  (is (false? (= ["hello"] [0])) "two vectors with different values")
  (is (false? (= ["1"] [1])) "two vectors with the same value but different types")
  (is (true? (= [:a :b] [:a :b])) "two vectors with keywords are equal")
  (is (true? (= [1 [:b]] [1 [:b]])) "nested vectors are equal")
  (is (false? (= [:a ["1"]] [:a [1]])) "nested vectors with different types are not equal")
  (is (false? (= [1] [1 2])) "vectors with different size are not equals"))

(deftest test-=-set
  (is (true? (= (set) (set))) "two empty sets are equal")
  (is (true? (= (set "hello") (set "hello"))) "two sets with the same values")
  (is (false? (= (set "hello") (set 0))) "two sets with different values")
  (is (false? (= (set "1") (set 1))) "two sets with the same value but different types")
  (is (true? (= (set :a :b) (set :a :b))) "two sets with keywords are equal")
  (is (true? (= (set :a :b) (set :b :a))) "two sets with unordered keywords are equal")
  (is (true? (= (set 1 (set :b)) (set 1 (set :b)))) "nested sets are equal")
  (is (true? (= (set 1 (set :b)) (set (set :b) 1))) "nested sets in different order are equal")
  (is (false? (= (set :a (set "1")) (set :a (set 1)))) "nested sets with different types are not equal")
  (is (false? (= (set 1) (set 1 2))) "sets with different size are not equals"))

(deftest test-=-on-map
  (is (true? (= {} {})) "two empty hash maps are equal")
  (is (true? (= {:key "value"} {:key "value"})) "two hash maps with the same values")
  (is (false? (= {:key "value"} {:key 0})) "two hash maps with same keys but different values")
  (is (true? (= {:key {:k "v"}} {:key {:k "v"}})) "nested hash maps are equal")
  (is (false? (= {:key {:k "v"}} {:key {:k 0}})) "nested hash maps with different types are not equal")
  (is (false? (= {:key "value"} {})) "two hash maps with different values")
  (is (true? (= {:k1 "v1" :k2 "v2"} {:k1 "v1" :k2 "v2"})) "two keys with same value")
  (is (true? (= {:k1 "v1" :k2 "v2"} {:k2 "v2" :k1 "v1"})) "two keys with same value but different order"))

(deftest test-not
  (is (false? (not true)) "(not true)")
  (is (true? (not false)) "(not false)")
  (is (false? (not 10)) "(not 10)")
  (is (false? (not [])) "(not [])"))

(deftest test-not=
  (is (false? (not= false)) "(not= false)")
  (is (false? (not= false false)) "(notfalse? false)")
  (is (false? (not= false false false)) "(notfalse? false false)")
  (is (true? (not= false true false)) "(notfalse? true false)")
  (is (false? (not= 10 10)) "(not= 10 10)")
  (is (true? (not= 10 10.0)) "(not= 10 10.0)"))

(deftest test-<
  (is (true? (< 10)) "(< 10)")
  (is (true? (< 10 20)) "(< 10 20)")
  (is (true? (< 10 20 30)) "(< 10 20 30)")
  (is (false? (< 10 10)) "(< 10 10)")
  (is (false? (< 10 9)) "(< 10 9)")
  (is (false? (< 10 20 15)) "(< 10 20 15)")
  (is (false? (< 10 20 20)) "(< 10 20 20)"))

(deftest test-<=
  (is (true? (<= 10)) "(<= 10)")
  (is (true? (<= 10 20)) "(<= 10 20)")
  (is (true? (<= 10 20 30)) "(<= 10 20 30)")
  (is (true? (<= 10 10)) "(<= 10 10)")
  (is (false? (<= 10 9)) "(<= 10 9)")
  (is (false? (<= 10 20 15)) "(<= 10 20 15)")
  (is (true? (<= 10 20 20)) "(<= 10 20 20)"))

(deftest test->
  (is (true? (> 10)) "(> 10)")
  (is (true? (> 20 10)) "(> 20 10)")
  (is (true? (> 30 20 10)) "(> 30 20 10)")
  (is (false? (> 10 10)) "(> 10 10)")
  (is (false? (> 9 10)) "(> 9 10)")
  (is (false? (> 20 10 15)) "(> 20 20 15)")
  (is (false? (> 20 20 10)) "(> 20 20 10)"))

(deftest test->=
  (is (true? (>= 10)) "(>= 10)")
  (is (true? (>= 20 10)) "(>= 20 10)")
  (is (true? (>= 30 20 10)) "(>= 30 20 10)")
  (is (true? (>= 10 10)) "(>= 10 10)")
  (is (false? (>= 9 10)) "(>= 9 10)")
  (is (false? (>= 20 10 15)) "(>= 20 20 15)")
  (is (true? (>= 20 20 10)) "(>= 20 20 10)"))

(deftest test-all?
  (is (true? (all? pos? [1 2 3])) "all pos? in list")
  (is (true? (all? pos? [])) "all pos? in empty list")
  (is (false? (all? pos? [1 -1 3])) "all pos? in list"))

(deftest test-some?
  (is (true? (some? pos? [1 2 3])) "some pos? in list")
  (is (false? (some? pos? [])) "some pos? in empty list")
  (is (true? (some? pos? [1 -1 3])) "some pos? in list")
  (is (false? (some? pos? [-1 -1 -3])) "some pos? in list"))

(deftest test-true?
  (is (true? (true? true)) "(true? true)")
  (is (false? (true? [])) "(true? [])")
  (is (false? (true? 10)) "(true? 10)")
  (is (false? (true? nil)) "(true? nil)")
  (is (false? (true? false)) "(true? false)"))

(deftest test-truthy?
  (is (true? (truthy? true)) "(truthy? true)")
  (is (true? (truthy? [])) "(truthy? [])")
  (is (true? (truthy? 10)) "(truthy? 10)")
  (is (false? (truthy? nil)) "(truthy? nil)")
  (is (false? (truthy? false)) "(truthy? false)"))

(deftest test-false?
  (is (true? (false? false)) "(false? false)")
  (is (false? (false? nil)) "(false? nil)")
  (is (false? (false? true)) "(false? true)"))

(deftest test-contains?-map
  (let [full-name {:first-name "Marco" :last-name "Polo" :street nil}]
    (is (true? (contains? full-name :first-name)))
    (is (true? (contains? full-name :last-name)))
    (is (true? (contains? full-name :street)))
    (is (false? (contains? full-name :unknown)))))

(deftest test-contains?-list
  (is (false? (contains? '() 0)))
  (is (true? (contains? '(1) 0)))
  (is (false? (contains? '(1) 1))))

(deftest test-contains?-vector
  (is (false? (contains? [] 0)))
  (is (true? (contains? [1] 0)))
  (is (false? (contains? [1] 1))))

(deftest test-contains?-set
  (is (false? (contains? (set) 1)))
  (is (true? (contains? (set 1) 1)))
  (is (false? (contains? (set 1) 2))))

(deftest test-contains-value?-php-indexed-array
  (is (false? (contains-value? (php-indexed-array) 1)))
  (is (false? (contains-value? (php-indexed-array 1) 2)))
  (is (true? (contains-value? (php-indexed-array 1) 1))))

(deftest test-contains-value?-list
  (is (false? (contains-value? '() 1)))
  (is (false? (contains-value? '(1) 0)))
  (is (true? (contains-value? '(1) 1))))

(deftest test-contains-value?-vector
  (is (false? (contains-value? [] 1)))
  (is (false? (contains-value? [1] 0)))
  (is (true? (contains-value? [1] 1))))

(deftest test-contains-value?-set
  (is (false? (contains-value? (set) 1)))
  (is (false? (contains-value? (set 1) 0)))
  (is (true? (contains-value? (set 1) 1))))

(deftest test-contains-value?-map
  (let [full-name {:first-name "Marco" :last-name "Polo" :street nil}]
    (is (true? (contains-value? full-name "Marco")))
    (is (true? (contains-value? full-name "Polo")))
    (is (false? (contains-value? full-name nil)))
    (is (false? (contains-value? full-name "unknown")))))

(deftest test-compare
  (is (= -1 (compare 1 2)) "(compare 1 2)")
  (is (= 1 (compare 2 1)) "(compare 2 1)")
  (is (= 0 (compare 1 1)) "(compare 1 1)"))
