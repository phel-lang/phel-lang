(ns phel-test\test\core
  (:require phel\test :refer [deftest is])
  (:require phel\str :as s)
  (:use Phel\Lang\Symbol))

# -------------
# Destructuring
# -------------

(deftest destructure-vector
  (is (= 3 (let [[a b] [1 2]] (+ a b))) "from vector")
  (is (= 3 (let [[a b] (php/array 1 2)] (+ a b))) "from php array")
  (is (= 10 (let [[a [c d] b] [1 (list 4 3) 2]] (+ a b c d))) "nested")
  (is (= 4 (let [[a _ b] [1 2 3]] (+ a b))) "ignore value"))

(deftest destructure-hash-map
  (is (= 3 (let [{:a a :b b} {:a 1 :b 2}] (+ a b))) "destructure hash map")
  (is (= 6 (let [{:a [a1 a2] :b b} {:a [1 3] :b 2}] (+ a1 a2 b))) "nested destructure hash map")
  (is (= 3 (let [{:keys [a b]} {:a 1 :b 2}] (+ a b))) "destructure hash map with :keys")
  (is (= {:a 1 :b 2} (let [{:keys [a b] :as user} {:a 1 :b 2}] user)) "destructure hash map with :keys and :as"))

# ----------------------------
# Basic methods for quasiquote
# ----------------------------

(deftest test-next
  (is (nil? (next [])) "next of empty vector")
  (is (nil? (next [1])) "next of one element vector")
  (is (= [2] (next [1 2])) "next of two element vector"))

(deftest test-concat
  (is (= [1 2] (concat [1 2])) "concat one argument")
  (is (= [1 2 3 4] (concat [1 2] [3 4])) "concat two arguments")
  (is (= [1 2 3 4] (concat [1] [2 3] [4])) "concat three arguments")
  (is (= '() (concat nil)) "concat nil")
  (is (= '() (concat nil nil)) "concat two nil")
  (is (= [1 2 3 4 5 6] (concat [1 2 3] nil [4 5 6])) "concat vectors and nil"))

(deftest test-set-push
  (let [s1 (set 1 2)
        s2 (push s1 3)]
    (is (= (set 1 2 3) s2) "set push"))
  (let [s1 (set 1 2)
        s2 (push s1 2)]
    (is (= (set 1 2) s2) "set push existing value")))

(deftest test-set-concat
  (is (= (set 0 1 2 3) (concat (set 1 2) [0 3])) "set concat vector")
  (is (= (set 0 1 2 3) (concat (set 1 2) [0 1 2 3])) "set concat vector with common values")
  (is (= (set 0 1 2) (concat (set 1 2) (set 0 1))) "set concat"))

(deftest list-as-function
  (let [xs (list 1 2 3)]
    (is (= 1 (xs 0)) "list can be invoked to access elements")
    (is (= 3 (xs 2)) "list invocation supports other indices")))

(defstruct my-struct [a b c])

(deftest test-struct
  (let [x (my-struct 1 2 3)]
    (is (= :struct (type x)) "struct: common type")
    (is (true? (struct? x)) "struct: common type test")
    (is (= 1 (get x :a)) "struct: get value from struct")
    (is (= (my-struct 12 2 3) (put x :a 12)) "struct: put value on struct")
    (is (true? (my-struct? x)) "struct: correct type")
    (is (false? (my-struct? :a)) "struct: incorrect type")))

(deftest test-struct-with-types
  (let [x (my-struct true 1 "str" {:a 1} [:b :c])]
    (is (= x (my-struct true 1 "str" {:a 1} [:b :c])) "structs with same data")))

(deftest test-__FILE__
  (is (true? (>= (php/strpos __FILE__ "tests/phel/test/core.phel") 0)) "__FILE__"))

(deftest test-__DIR__
  (is (true? (and (false? (php/strpos __DIR__ "tests/phel/test/core.phel")) (>= (php/strpos __DIR__ "tests/phel/test") 0))) "__DIR__"))


(deftest test-var
  (is (= :var (type (var 10))) "type of var is :var")
  (is (= 10 (deref (var 10))) "deref variable")
  (is (true? (var? (var 10))) "var? return true if x is a variable")
  (is (false? (var? 10)) "var? return false if x is a number")
  (is (= 20 (let [x (var 10)] (set! x 20) (deref x))) "set new value to variable")
  (is (= 11 (let [x (var 10)] (swap! x + 1) (deref x))) "swap a value by incrementing the number"))

(deftest test-if-let
  (is (= 1 (if-let [a 1] a)))
  (is (= 2 (if-let [[a b] '(1 2)] b)))
  (is (= nil (if-let [a false] (throw (php/new \Exception)))))
  (is (= 1 (if-let [a false] a 1)))
  (is (= 1 (if-let [[a b] nil] b 1)))
  (is (= 1 (if-let [a false] (throw (php/new \Exception)) 1))))

(deftest test-when-let
  (is (= 1 (when-let [a 1] a)))
  (is (= 2 (when-let [[a b] '(1 2)] b)))
  (is (= nil (when-let [a false] (throw (php/new \Exception))))))

(deftest test-time
  (is (= 2 (+ 1 1)) "time returns expr value")
  (let [output-print (with-output-buffer (time (+ 1 1)))]
    (is (string? output-print) "time prints to output")
    (is (s/contains? output-print "Elapsed time:"))
    (is (s/contains? output-print "msecs"))))

(deftest test-name
  (is (= "string" (name "string")) "name on string")
  (is (= "symbol" (name 'symbol)) "name on symbol")
  (is (= "keyword" (name :keyword)) "name of keyword"))

(deftest test-symbol
  (is (= "Phel\\Lang\\Symbol" (php/get_class (symbol "abc"))) "symbol returns Symbol class instance")
  (is (= 'abc (symbol "abc")) "symbol on simple string")
  (is (= '*_.%;!:+-? (symbol "*_.%;!:+-?")) "symbol on complex string")
  (is (= 'foo/bar (symbol "foo" "bar")) "symbol on string with namespace")
  (is (= "foo" (php/-> (symbol "foo" "bar") (getNamespace))) "symbol on string with namespace using getNamespace")
  (is (= nil (php/-> (symbol "bar") (getNamespace))) "symbol on string without namespace using getNamespace")
  (is (= 'foo (php/:: (symbol (str "\Phel" "\Lang" "\Symbol")) (create "foo"))) "symbol on PHP class identifier string"))

(deftest test-namespace
  (is (= nil (namespace 'symbol)) "namespace on symbol without ns")
  (is (= nil (namespace :keyword)) "namespace of keyword without ns")
  (is (= "test" (namespace (php/:: Symbol (createForNamespace "test" "symbol")))) "namespace on symbol with ns")
  (is (= "phel-test\\test\\core" (namespace ::keyword)) "namespace of keyword with ns"))

(deftest test-full-name
  (is (= "string" (name "string")) "full-name on string")
  (is (= "symbol" (full-name 'symbol)) "full-name on symbol without ns")
  (is (= "keyword" (full-name :keyword)) "full-name of keyword without ns")
  (is (= "test/symbol" (full-name (php/:: Symbol (createForNamespace "test" "symbol")))) "full-name on symbol with ns")
  (is (= "phel-test\\test\\core/keyword" (full-name ::keyword)) "full-name of keyword with ns"))

(deftest test-read-string
  (is (= '(+ 1 1) (read-string "(+ 1 1)")) "read simple expression")
  (is (= nil (read-string "")) "read empty string"))

(deftest test-eval-form
  (is (= 2 (eval '(+ 1 1))) "eval simple expression"))

(deftest test-compile-form
  (is (= "(\\Phel::getDefinition(\"phel\\\\core\", \"assert-non-nil\"))(1, 1);\n(1 + 1);"
         (compile '(+ 1 1)))
    "compile simple expression"))

(deftest test-hash-map-put-17th-notice-issue-786
  (let [m {""              1
           "0Mlq3z"        1
           "bTOQLr"        1
           "P0dH3t"        1
           "1238924228357" 1
           "AB18924230123" 1
           "BC1892423005"  1
           "A7I8924230I8"  1
           "987182423015"  1
           "9871892423017" 1
           "JF0010"        1
           "JF1102"        1
           "JF1017"        1
           "JF1015"        1
           "JF1260"        1
           "JF1261"        1
           "jiKUic"        1}
        result (put m "PU4NVO" 1)]
   (is (= 18 (count result)))
   (is (= 1 (result "PU4NVO")))))
