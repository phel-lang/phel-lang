--PHEL--
(ns hello-world
  (:require my-namespace\core)
  (:use my_other-name\test))

(def x :private 10)

(defstruct abc [a])
--PHP--
namespace hello_world;
require_once __DIR__ . '/phel/core.php';
require_once __DIR__ . '/my_namespace/core.php';
\Phel::addDefinition(
  "phel\\core",
  "*file*",
  "Ns/munge-ns.test"
);
\Phel::addDefinition(
  "phel\\core",
  "*ns*",
  "hello_world"
);
\Phel::addDefinition(
  "hello_world",
  "x",
  10,
  \Phel::map(
    \Phel::keyword("private"), true,
    \Phel::keyword("start-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 5,
      \Phel::keyword("column"), 0
    ),
    \Phel::keyword("end-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 5,
      \Phel::keyword("column"), 19
    )
  )
);
if (!class_exists('hello_world\abc')) {
class abc extends \Phel\Lang\Collections\Struct\AbstractPersistentStruct {

  protected const array ALLOWED_KEYS = ['a'];

  protected $a;

  public function __construct($a, $meta = null) {
    parent::__construct();
    $this->a = $a;
    $this->meta = $meta;
  }
}
}

\Phel::addDefinition(
  "hello_world",
  "abc",
  new class() extends \Phel\Lang\AbstractFn {
    public const BOUND_TO = "hello_world\\abc";

    public function __invoke($a) {
      return (function() use($a) {
        $target_1 = "hello_world\\abc";
        return new $target_1($a);
      })();
    }
  },
  \Phel::map(
    \Phel::keyword("doc"), "```phel\n(abc a)\n```\nCreates a new abc struct.",
    \Phel::keyword("start-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 7,
      \Phel::keyword("column"), 0
    ),
    \Phel::keyword("end-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 7,
      \Phel::keyword("column"), 19
    ),
    "min-arity", 1
  )
);

\Phel::addDefinition(
  "hello_world",
  "abc?",
  new class() extends \Phel\Lang\AbstractFn {
    public const BOUND_TO = "hello_world\\abc?";

    public function __invoke($x) {
      return is_a($x, "hello_world\\abc");
    }
  },
  \Phel::map(
    \Phel::keyword("doc"), "```phel\n(abc? x)\n```\nChecks if `x` is an instance of the abc struct.",
    \Phel::keyword("start-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 7,
      \Phel::keyword("column"), 0
    ),
    \Phel::keyword("end-location"), \Phel::map(
      \Phel::keyword("file"), "Ns/munge-ns.test",
      \Phel::keyword("line"), 7,
      \Phel::keyword("column"), 19
    ),
    "min-arity", 1
  )
);
